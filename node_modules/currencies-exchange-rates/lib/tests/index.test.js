"use strict";

var _index = require("../index");

describe('index.js file', () => {
  describe('getCurrencyRateList method', () => {
    test('base value should equal to EUR', async () => {
      const result = await (0, _index.getCurrencyRateList)();
      expect(result['base']).toEqual('EUR');
    });
    test('should return not null', async () => {
      expect((await (0, _index.getCurrencyRateList)('EUR'))).not.toBeNull();
    });
    test('date value should equal 2015-05-05 and base to EUR', async () => {
      const result = await (0, _index.getCurrencyRateList)('EUR', '2015-05-05');
      expect(result['date']).toEqual('2015-05-05');
      expect(result['base']).toEqual('EUR');
    });
    test('should not return null', async () => {
      expect((await (0, _index.getCurrencyRate)('EUR', 'USD', '2019-05-05'))).toEqual({
        base: 'EUR',
        rates: {
          USD: 1.1155
        },
        date: '2019-05-03'
      });
    });
  });
  describe('getCurrencyRate method', () => {
    test('should return exchange rate', async () => {
      expect((await (0, _index.getCurrencyRate)('usd', 'eur', '2019-05-05'))).toEqual({
        "base": "USD",
        "date": "2019-05-03",
        "rates": {
          "EUR": 0.896458987
        }
      });
    });
  });
  describe('convertCurrency method', () => {
    test('should convert currency', async () => {
      expect((await (0, _index.convertCurrency)('usd', 'eur', 100, '2019-05-05'))).toEqual(89.6458987);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9pbmRleC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwidGVzdCIsInJlc3VsdCIsImV4cGVjdCIsInRvRXF1YWwiLCJub3QiLCJ0b0JlTnVsbCIsImJhc2UiLCJyYXRlcyIsIlVTRCIsImRhdGUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUFBLFFBQVEsQ0FBQyxlQUFELEVBQWtCLE1BQU07QUFDNUJBLEVBQUFBLFFBQVEsQ0FBQyw0QkFBRCxFQUErQixNQUFNO0FBQ3pDQyxJQUFBQSxJQUFJLENBQUMsZ0NBQUQsRUFBbUMsWUFBWTtBQUMvQyxZQUFNQyxNQUFNLEdBQUcsTUFBTSxpQ0FBckI7QUFDQUMsTUFBQUEsTUFBTSxDQUFDRCxNQUFNLENBQUMsTUFBRCxDQUFQLENBQU4sQ0FBdUJFLE9BQXZCLENBQStCLEtBQS9CO0FBQ0gsS0FIRyxDQUFKO0FBSUFILElBQUFBLElBQUksQ0FBQyx3QkFBRCxFQUEyQixZQUFZO0FBQ3ZDRSxNQUFBQSxNQUFNLEVBQUMsTUFBTSxnQ0FBb0IsS0FBcEIsQ0FBUCxFQUFOLENBQXlDRSxHQUF6QyxDQUE2Q0MsUUFBN0M7QUFDSCxLQUZHLENBQUo7QUFHQUwsSUFBQUEsSUFBSSxDQUFDLG9EQUFELEVBQXVELFlBQVk7QUFDbkUsWUFBTUMsTUFBTSxHQUFHLE1BQU0sZ0NBQW9CLEtBQXBCLEVBQTJCLFlBQTNCLENBQXJCO0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDLE1BQUQsQ0FBUCxDQUFOLENBQXVCRSxPQUF2QixDQUErQixZQUEvQjtBQUNBRCxNQUFBQSxNQUFNLENBQUNELE1BQU0sQ0FBQyxNQUFELENBQVAsQ0FBTixDQUF1QkUsT0FBdkIsQ0FBK0IsS0FBL0I7QUFDSCxLQUpHLENBQUo7QUFLQUgsSUFBQUEsSUFBSSxDQUFDLHdCQUFELEVBQTJCLFlBQVk7QUFDdkNFLE1BQUFBLE1BQU0sRUFBQyxNQUFNLDRCQUFnQixLQUFoQixFQUF1QixLQUF2QixFQUE4QixZQUE5QixDQUFQLEVBQU4sQ0FBMERDLE9BQTFELENBQWtFO0FBQUVHLFFBQUFBLElBQUksRUFBRSxLQUFSO0FBQWVDLFFBQUFBLEtBQUssRUFBRTtBQUFFQyxVQUFBQSxHQUFHLEVBQUU7QUFBUCxTQUF0QjtBQUF1Q0MsUUFBQUEsSUFBSSxFQUFFO0FBQTdDLE9BQWxFO0FBQ0gsS0FGRyxDQUFKO0FBR0gsR0FoQk8sQ0FBUjtBQWtCQVYsRUFBQUEsUUFBUSxDQUFDLHdCQUFELEVBQTJCLE1BQU07QUFDckNDLElBQUFBLElBQUksQ0FBQyw2QkFBRCxFQUFnQyxZQUFZO0FBQzVDRSxNQUFBQSxNQUFNLEVBQUMsTUFBTSw0QkFBZ0IsS0FBaEIsRUFBdUIsS0FBdkIsRUFBOEIsWUFBOUIsQ0FBUCxFQUFOLENBQTBEQyxPQUExRCxDQUFrRTtBQUFDLGdCQUFRLEtBQVQ7QUFBZ0IsZ0JBQVEsWUFBeEI7QUFBc0MsaUJBQVM7QUFBQyxpQkFBTztBQUFSO0FBQS9DLE9BQWxFO0FBQ0gsS0FGRyxDQUFKO0FBR0gsR0FKTyxDQUFSO0FBTUFKLEVBQUFBLFFBQVEsQ0FBQyx3QkFBRCxFQUEyQixNQUFNO0FBQ3JDQyxJQUFBQSxJQUFJLENBQUMseUJBQUQsRUFBNEIsWUFBWTtBQUN4Q0UsTUFBQUEsTUFBTSxFQUFDLE1BQU0sNEJBQWdCLEtBQWhCLEVBQXVCLEtBQXZCLEVBQThCLEdBQTlCLEVBQW1DLFlBQW5DLENBQVAsRUFBTixDQUErREMsT0FBL0QsQ0FBdUUsVUFBdkU7QUFDSCxLQUZHLENBQUo7QUFHSCxHQUpPLENBQVI7QUFLSCxDQTlCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb252ZXJ0Q3VycmVuY3ksIGdldEN1cnJlbmN5UmF0ZSwgZ2V0Q3VycmVuY3lSYXRlTGlzdH0gZnJvbSAnLi4vaW5kZXgnO1xyXG5cclxuZGVzY3JpYmUoJ2luZGV4LmpzIGZpbGUnLCAoKSA9PiB7XHJcbiAgICBkZXNjcmliZSgnZ2V0Q3VycmVuY3lSYXRlTGlzdCBtZXRob2QnLCAoKSA9PiB7XHJcbiAgICAgICAgdGVzdCgnYmFzZSB2YWx1ZSBzaG91bGQgZXF1YWwgdG8gRVVSJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRDdXJyZW5jeVJhdGVMaXN0KCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHRbJ2Jhc2UnXSkudG9FcXVhbCgnRVVSJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGVzdCgnc2hvdWxkIHJldHVybiBub3QgbnVsbCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZXhwZWN0KGF3YWl0IGdldEN1cnJlbmN5UmF0ZUxpc3QoJ0VVUicpKS5ub3QudG9CZU51bGwoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0ZXN0KCdkYXRlIHZhbHVlIHNob3VsZCBlcXVhbCAyMDE1LTA1LTA1IGFuZCBiYXNlIHRvIEVVUicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0Q3VycmVuY3lSYXRlTGlzdCgnRVVSJywgJzIwMTUtMDUtMDUnKTtcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdFsnZGF0ZSddKS50b0VxdWFsKCcyMDE1LTA1LTA1Jyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHRbJ2Jhc2UnXSkudG9FcXVhbCgnRVVSJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGVzdCgnc2hvdWxkIG5vdCByZXR1cm4gbnVsbCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZXhwZWN0KGF3YWl0IGdldEN1cnJlbmN5UmF0ZSgnRVVSJywgJ1VTRCcsICcyMDE5LTA1LTA1JykpLnRvRXF1YWwoeyBiYXNlOiAnRVVSJywgcmF0ZXM6IHsgVVNEOiAxLjExNTUgfSwgZGF0ZTogJzIwMTktMDUtMDMnIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZGVzY3JpYmUoJ2dldEN1cnJlbmN5UmF0ZSBtZXRob2QnLCAoKSA9PiB7XHJcbiAgICAgICAgdGVzdCgnc2hvdWxkIHJldHVybiBleGNoYW5nZSByYXRlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBleHBlY3QoYXdhaXQgZ2V0Q3VycmVuY3lSYXRlKCd1c2QnLCAnZXVyJywgJzIwMTktMDUtMDUnKSkudG9FcXVhbCh7XCJiYXNlXCI6IFwiVVNEXCIsIFwiZGF0ZVwiOiBcIjIwMTktMDUtMDNcIiwgXCJyYXRlc1wiOiB7XCJFVVJcIjogMC44OTY0NTg5ODd9fSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZXNjcmliZSgnY29udmVydEN1cnJlbmN5IG1ldGhvZCcsICgpID0+IHtcclxuICAgICAgICB0ZXN0KCdzaG91bGQgY29udmVydCBjdXJyZW5jeScsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgZXhwZWN0KGF3YWl0IGNvbnZlcnRDdXJyZW5jeSgndXNkJywgJ2V1cicsIDEwMCwgJzIwMTktMDUtMDUnKSkudG9FcXVhbCg4OS42NDU4OTg3KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59KTsiXX0=